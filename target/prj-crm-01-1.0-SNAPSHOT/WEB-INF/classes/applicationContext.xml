<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring整和mybatis共需三步-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--1. 配置数据源（druid数据库连接池）-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
    </bean>
    <!--2. 注册sqlSessionFactory的bean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定 mybatis主配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--3. 注册mapper扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定要扫描的包，即存放dao接口的包-->
        <property name="basePackage" value="cn.andylhl.crm.dao"/>
    </bean>

    <!--使用Aspect AOP配置声明式事务-->
<!--    &lt;!&ndash;1. 声明事务管理器&ndash;&gt;-->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        &lt;!&ndash;配置数据源属性&ndash;&gt;-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash;2. 声明事务属性&ndash;&gt;-->
<!--    <tx:advice id="crmAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    &lt;!&ndash;3.配置AOP &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;配置切入点表达式：指定哪些包中类，要使用事务-->
<!--            id:切入点表达式的名称，唯一值-->
<!--            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象-->
<!--            com.bjpowernode.service-->
<!--            com.crm.service-->
<!--            com.service-->
<!--        &ndash;&gt;-->
<!--        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>-->

<!--        &lt;!&ndash;配置增强器：关联adivce和pointcut-->
<!--           advice-ref:通知，上面tx:advice哪里的配置-->
<!--           pointcut-ref：切入点表达式的id-->
<!--        &ndash;&gt;-->
<!--        <aop:advisor advice-ref="crmAdvice" pointcut-ref="servicePt" />-->
<!--    </aop:config>-->
    <!--声明式事务处理：和源代码完全分离的-->
    <!--1.声明事务管理器对象-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--2.声明业务方法它的事务属性（隔离级别，传播行为，超时时间）
          id:自定义名称，表示 <tx:advice> 和 </tx:advice>之间的配置内容的
          transaction-manager:事务管理器对象的id
    -->
    <tx:advice id="crmAdvice" transaction-manager="transactionManager">
        <!--tx:attributes：配置事务属性-->
        <tx:attributes>
            <!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性
                name:方法名称，1）完整的方法名称，不带有包和类。
                              2）方法可以使用通配符,* 表示任意字符
                propagation：传播行为，枚举值
                isolation：隔离级别
                rollback-for：你指定的异常类名，全限定类名。 发生异常一定回滚
            -->
            <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT"/>
            <!--使用通配符，指定很多的方法-->
            <tx:method name="add*" propagation="REQUIRES_NEW" />
            <!--指定修改方法-->
            <tx:method name="modify*" />
            <!--删除方法-->
            <tx:method name="remove*" />
            <!--查询方法，query，search，find-->
            <tx:method name="*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类，要使用事务
            id:切入点表达式的名称，唯一值
            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象

            com.bjpowernode.service
            com.crm.service
            com.service
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>

        <!--配置增强器：关联adivce和pointcut
           advice-ref:通知，上面tx:advice哪里的配置
           pointcut-ref：切入点表达式的id
        -->
        <aop:advisor advice-ref="crmAdvice" pointcut-ref="servicePt" />
    </aop:config>

    <!--配置StudentServiceImpl-->
    <bean id="studentService" class="cn.andylhl.crm.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao"/>
    </bean>

</beans>