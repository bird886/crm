<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  <!--注册监听器ContextLoaderListener
      监听器被创建对象后，会读取/WEB-INF/spring.xml
      为什么要读取文件：因为在监听器中要创建ApplicationContext对象，需要加载配置文件。
      /WEB-INF/applicationContext.xml就是监听器默认读取的spring配置文件路径

      可以修改默认的文件位置，使用context-param重新指定文件的位置

      配置监听器：目的是创建容器对象，创建了容器对象， 就能把spring.xml配置文件中的所有对象都创建好。
      用户发起请求就可以直接使用对象了。
  -->

  <!--指定spring配置文件位置-->
<!--  <context-param>-->
<!--    <param-name>contextConfigLocation</param-name>-->
<!--    <param-value>classpath:applicationContext.xml</param-value>-->
<!--  </context-param>-->
  <context-param>
    <!-- contextConfigLocation:表示配置文件的路径  -->
    <param-name>contextConfigLocation</param-name>
    <!--自定义配置文件的路径-->
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!--注册监听器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--登录拦截过滤器-->
  <filter>
    <filter-name>LoginFilter</filter-name>
    <filter-class>cn.andylhl.crm.web.filter.LoginFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LoginFilter</filter-name>
    <url-pattern>*.do</url-pattern>
    <url-pattern>*.html</url-pattern>
    <url-pattern>*.jsp</url-pattern>
  </filter-mapping>

  <!--字符编码过滤器-->
  <filter>
    <filter-name>EncodingFilter</filter-name>
    <filter-class>cn.andylhl.crm.web.filter.EncodingFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>EncodingFilter</filter-name>
    <url-pattern>*.do</url-pattern>
  </filter-mapping>

</web-app>